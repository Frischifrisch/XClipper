name: Windows CI
on:
  push:
    paths-ignore:
      - "XClipper.Web/**"
      - "XClipper.Android/**"
      - "*.md"
      - "art/**"
      - "docs/**"
      - "*.html"
      - ".github/workflows/android.yml"

  pull_request:
    paths-ignore:
      - "XClipper.Web/**"
      - "XClipper.Android/**"
      - "*.md"
      - "art/**"
      - "docs/**"
      - "*.html"
      - ".github/workflows/android.yml"

jobs:
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setting up nuget
        uses: nuget/setup-nuget@v1
      - name: Setting up msbuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Setting up dependencies
        uses: RollyPeres/base64-to-path@v1
        with:
          filePath: ${{ github.workspace }}/protect.tar.gz
          encodedString: ${{ secrets.SLN_PROTECT }}
      - name: Restoring dependencies & building project
        run: |
          tar -xvzf protect.tar.gz
          tar -xvzf scripts\inno.tar.gz
          del protect.tar.gz
          nuget restore XClipper.sln
          msbuild XClipper.sln /t:Rebuild /p:WarningLevel=0 /p:Configuration=Release
      - name: Building Installer
        id: installer
        run: |
          copy XClipper.App\Locales\*.xaml XClipper.App\bin\Release\locales
          del XClipper.App\bin\Release\*.xml
          del XClipper.App\bin\Release\*.pdb
          del XClipper.App\bin\Release\*.config
          echo "::set-output name=production_version::$(${{ github.workspace }}\packager.exe -i exe)"
          ${{ github.workspace }}\packager.exe -r
          scripts\inno\iscc.exe scripts\installer.iss
      - name: Setting output file
        id: vars
        shell: pwsh
        run: |
          echo "::set-output name=production::$(echo (Get-ChildItem -Path "scripts\out" | sort | Select-Object -First 1).Name | cut -c -25)"
          echo "::set-output name=sha_short::$(echo ${{ github.sha }} | cut -c -7)"
      - name: Creating portable tar.gz
        run: |
          cd XClipper.App\bin\Release && tar -cvzf "${{ github.workspace }}\scripts\out\${{ steps.vars.outputs.production }}.tar.gz" *

      - name: Drafing a release
        id: create_release
        uses: actions/create-release@v1
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.installer.outputs.production_version }}
          release_name: v${{ steps.installer.outputs.production_version }}
          body_path: ${{ github.workspace }}\scripts\changes.txt
          draft: true

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./scripts/out/${{ steps.vars.outputs.production }}.exe
          asset_name: ${{ steps.vars.outputs.production }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        id: upload-release-asset2
        uses: actions/upload-release-asset@v1
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./scripts/out/${{ steps.vars.outputs.production }}.tar.gz
          asset_name: XClipper-Portable-x64.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master'
        with:
          name: XClipper.win-snapshot-${{ steps.vars.outputs.sha_short }}
          path: scripts/out/

  draft_remove:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select( .assets[].browser_download_url | contains (".exe") ) | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}

  # Common action to notify on discord
  discord_notify:
    needs: [windows]
    runs-on: ubuntu-latest
    steps:
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(echo ${{ github.sha }} | cut -c -7)"
      - name: Sending commit notification
        if: (!startsWith(github.event.pusher, '')) && startsWith(github.event.pusher.name, 'KaustubhPatange')
        env:
          DISCORD_WEBHOOK: ${{ secrets.WEBHOOK_PC }}
        uses: Ilshidur/action-discord@master
        with:
          args: Commit [${{ steps.vars.outputs.sha_short }}](${{github.event.repository.html_url}}/commit/${{ github.sha }}) had a successful build!
